#!/bin/bash
#
# (c) 2012 YeaSoft Int'l - Leo Moll
#
# Version 20120627
# This script prepares the environment for an Ubuntu installation

#####################################
# script initialization

# load function library
source uic_utils

# load user customized configuration data
[ -f /etc/uic.conf ] &&	source /etc/uic.conf

#####################################
# variables section

# initialize runtime variables
FORCE=0
LISTEMPLATES=0
SHOWVERSIONS=0
ENVNAME=
SRCARCHIVE=
DESTPATH=
TMPDESTINATION=
TMPARCHIVE=


#####################################
# function section

function usage {
	cat <<EOF
usage: $SCRIPTNAME [-hvFls] [-n <name>] <template archive> [<destination path>]

Options:
 -s, --show           show the available versions of the requested template
 -l, --list           list all available templtes on the repository
 -n, --name           use an alternative name for the installation environment
 -F, --force          force deletion of existing installation environment
 -v, --verbose        increase verbosity
(-h) --help           show this help (-h works with no other options)

This script prepares the environment for an Ubuntu installation

<source archive> can be:
 - the base name of an installation environment (e.g.: netpoldo-1004-32)
 - a local path to an UIC template archive
 - a URL to an UIC template archive

If <destination path> is omitted, the installation environment will be created in
the default work directory (usually /usr/src)

EOF
}

# $1 : repository url
# $2 : optional search operator
function list_templates {
	CONTENT=$(mktemp)
	if download_archive $1 $CONTENT; then
		if [ $(grep -c "href=\"${2-.*}\\.manifest\"" $CONTENT) -gt 0 ]; then
			show_verbose 1 "The following templates are stored on $1:"
			grep -o "href=\"${2-.*}\\.manifest\"" $CONTENT | sed -e "s/href=\"//g" -e "s/.manifest\"//g" | sort
		else
			show_verbose 1 "There are no templates stored on $1"
		fi
	fi
	rm $CONTENT
}


# $1 : path to the manifest file
# $2 : repository url
# $3 : template name
function show_versions {
	if [ -f "$1" ]; then
		if [ $(stat -t "$1" | cut -d\  -f 2) -gt 0 ]; then
			show_verbose 1 "The following versions of $3 are available on $2:"
			awk '{print $2}' "$1" | sed -e "s/*//g"
			return 0
		fi
	fi
	show_verbose 1 "There are no versions of $3 available on $2."
	return 0;
}

# $1 : template url
# $2 : destination filename
function download_archive {
	show_verbose 1 "Downloading $(basename $1) from $(dirname $1)..."
	DA_TEMPDIR=$(mktemp -d)
	DA_ERR=0
	if  wget -q -P "${DA_TEMPDIR}" $1; then
		if [ -f "${DA_TEMPDIR}/$(basename $1)" ]; then
			mv "${DA_TEMPDIR}/$(basename $1)" "$2"
		else
			DA_ERR=2
		fi
	else
		DA_ERR=$?
	fi
	rm -rf "${DA_TEMPDIR}"
	return ${DA_ERR}
}

#####################################
# script section

# Parameter parsing
PARSER=$(getopt --name "$SCRIPTNAME" --options h,v,F,n:,l,s --longoptions help,verbose,force,name:,list,show -- "$@")
test_getopt
eval set -- "$PARSER"
while true; do
	case "$1" in
	-h|--help)			show_name; echo; usage; exit 1;;
	-v|--verbose)			(( VERBOSE++ )); shift;;
	-F|--force)                     FORCE=1; shift;;
	-n|--name)			ENVNAME="$2"; shift 2;;
	-s|--show)			SHOWVERSIONS=1; shift;;
	-l|--list)			LISTEMPLATES=1; shift;;
	--)				shift; break;;
        *)				echo "$SCRIPTNAME: $1: unknown option"; show_error "syntax or usage error (code 1)"; exit 1;;
        esac
done

# configuration checking
case "$VERBOSE" in
0)	;;
1)	show_name;;
*)	show_name;;
esac

# check if we have all that we need
test_prereq

if [ $LISTEMPLATES -gt 0 ]; then
	for REPOSITORY in ${UIC_REPOSITORIES}; do
		list_templates $REPOSITORY $1
	done
	exit 0;
elif [ -z "$1" ]; then
	show_error "<source archive> must be specified."
	exit 3;
else
	SRCARCHIVE="$1"
fi
if [ -z "$2" ]; then
	DESTPATH="${UIC_WORKDIR}"
elif [ "${2:0:1}" = "/" ]; then
	# absolute path
	DESTPATH="$2"
else
	# relative path
	DESTPATH="$(pwd)/$2"
fi

if [ ! -d "${DESTPATH}" ]; then
	show_error "Destination path ${DESTPATH} does not exist."
	exit 2;
fi

if [ "${SRCARCHIVE:0:7}" = "http://" -o "${SRCARCHIVE:0:8}" = "https://" -o "${SRCARCHIVE:0:6}" = "ftp://" ]; then
	show_verbose 2 "Trying to download ${SRCARCHIVE}..."
	TMPARCHIVE="$(mktemp)"
	if ! download_archive "${SRCARCHIVE}" "${TMPARCHIVE}"; then
		show_error "Template archive ${SRCARCHIVE} not found."
		rm -f "${TMPARCHIVE}"
		exit 2;
	fi
	show_verbose 2 "Template archive $(basename ${SRCARCHIVE}) successfully downloaded. Trying to unpack..."
	SRCARCHIVE="${TMPARCHIVE}"
elif [ -f "${SRCARCHIVE}" ]; then
	show_verbose 2 "Source archive ${SRCARCHIVE} is physically reachable. Trying to unpack..."
elif [ $(expr match "$1" '.*\/.*') -ne 0 ]; then
	show_error "Template archive ${SRCARCHIVE} not found."
	exit 2;
else
	MANIFEST="$(mktemp)"
	TEMPLATE="${SRCARCHIVE}"
	show_verbose 2 "Trying to get ${TEMPLATE} from the repositories..."
	for REPOSITORY in ${UIC_REPOSITORIES}; do
		ARCHFILE=
		if download_archive ${REPOSITORY}/${TEMPLATE}.manifest "${MANIFEST}"; then
			show_verbose 1 "Found ${TEMPLATE} in ${REPOSITORY}"
			if [ ${SHOWVERSIONS} -gt 0 ]; then
				show_versions "${MANIFEST}" ${REPOSITORY} ${TEMPLATE}
				rm -f "${MANIFEST}"
				exit 0
			fi
			ARCHFILE=$(awk '{print $2}' < "${MANIFEST}" | sort -r | head -n1)
			if [ "${ARCHFILE:0:1}" = "*" ]; then
				ARCHFILE="${ARCHFILE:1}"
			fi
			SRCARCHIVE="$(mktemp)"
			if download_archive ${REPOSITORY}/${ARCHFILE} "${SRCARCHIVE}"; then
				TMPARCHIVE="${SRCARCHIVE}"
				break;
			else
				show_error "Cannot download ${ARCHFILE} from ${REPOSITORY}"
				rm -f "${MANIFEST}"
				rm -f "${SRCARCHIVE}"
				exit 2
			fi
		fi
	done
	rm "${MANIFEST}"
	if [ -z "${TMPARCHIVE}" ]; then
		show_error "${TEMPLATE} not found in any repository"
		exit 2
	fi
fi

TMPDESTINATION="$(mktemp -d)"
tar -xjpf "${SRCARCHIVE}" --directory "${TMPDESTINATION}"
if [ $? -ne 0 ]; then
	show_error "Cannot unpack template archive to ${TMPDESTINATION}"
	[ -n "${TMPDESTINATION}" -a -d "${TMPDESTINATION}" ] && rm -rf "${TMPDESTINATION}"
	[ -n "${TMPARCHIVE}"     -a -f "${TMPARCHIVE}" ]     && rm "${TMPARCHIVE}"
	exit $?
fi

UICLIST=( $(find "${TMPDESTINATION}" -name uictpl.conf) )
if [ ${#UICLIST[@]} -eq 0 ]; then
	show_error "Template archive does not contain a valid installation environment"
	[ -n "${TMPDESTINATION}" -a -d "${TMPDESTINATION}" ] && rm -rf "${TMPDESTINATION}"
	[ -n "${TMPARCHIVE}"     -a -f "${TMPARCHIVE}" ]     && rm "${TMPARCHIVE}"
	exit 3
fi

UICPATH=${UICLIST[0]#${TMPDESTINATION}}
UICNAME=$(basename "${UICPATH}")
UICPATH=$(expr match "${UICPATH}" '\(.*\)'\/${UICNAME})
UICPATH=${UICPATH:1}

if [ -z "${ENVNAME}" ]; then
	ENVNAME="${UICPATH}"
fi

verify_environment "${TMPDESTINATION}/${UICPATH}"

if [ -d "${DESTPATH}/${ENVNAME}" ]; then
	if [ ${FORCE} -gt 0 ]; then
		show_verbose 1 "Destination environment exists but will be replaced"
		rm -rf "${DESTPATH}/${ENVNAME}"
	else
		show_error "Destination environment exists in ${DESTPATH}/${ENVNAME}. Use -F to force cleanup."
		[ -n "${TMPDESTINATION}" -a -d "${TMPDESTINATION}" ] && rm -rf "${TMPDESTINATION}"
		[ -n "${TMPARCHIVE}"     -a -f "${TMPARCHIVE}" ]     && rm "${TMPARCHIVE}"
		exit 1
	fi
fi

mv "${TMPDESTINATION}/${UICPATH}" "${DESTPATH}/${ENVNAME}"
[ -n "${TMPDESTINATION}" -a -d "${TMPDESTINATION}" ] && rm -rf "${TMPDESTINATION}"
[ -n "${TMPARCHIVE}"     -a -f "${TMPARCHIVE}" ]     && rm "${TMPARCHIVE}"

show_verbose 1 "Destination environment ${ENVNAME} successfully created."
