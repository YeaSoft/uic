#!/bin/bash
#
# (c) 2012 YeaSoft Int'l - Leo Moll
#
# VERSION 20120326
# function collection for the netpoldo development system

#####################
# Internal Variables
VERSION=0.3
SPECIALFSM="/sys /proc /dev /dev/pts /dev/shm"
SPECIALFSU="/dev/shm /dev/pts /dev /proc /sys"
SPECIALFSMOUNT=0
OLDHOSTNAME=$(hostname)
TARGET=

#####################
# Functions

function init_script() {
	trap cleanup_script INT QUIT TERM EXIT
        call_hook init_script
}

function cleanup_script() {
        trap - INT QUIT TERM EXIT
        call_hook exit_script
        chroot_exit
        cleanup_mounts
}


function chroot_init() {
	if [ $SPECIALFSMOUNT -lt 1 ]; then
		show_verbose 1 "Mounting special file systems in environment..."
		mount_special
		SPECIALFSMOUNT=1
	fi
}

function mount_special() {
	for MOUNT_POINT in $SPECIALFSM; do
		if ! grep "${TARGET}/chroot${MOUNT_POINT}" /proc/mounts > /dev/null; then
			mount -o bind ${MOUNT_POINT} ${TARGET}/chroot${MOUNT_POINT}
		fi
	done
}

function umount_special() {
	for MOUNT_POINT in $SPECIALFSU; do
		if grep "${TARGET}/chroot${MOUNT_POINT}" /proc/mounts > /dev/null; then
			umount ${TARGET}/chroot${MOUNT_POINT}
		fi
	done
}

function chroot_exit() {
	if [ $SPECIALFSMOUNT -gt 0 ]; then
		show_verbose 1 "Unmounting special file systems in environment..."
		umount_special 2> /dev/null
		SPECIALFSMOUNT=0
	fi
}

function test_mountinuse() {
	if grep "${TARGET}/chroot" /proc/mounts; then
		show_error "WARNING: There are active mounts in the installation environment probably"
		show_error "         because of an active preparation session. The execution will be"
		show_error "         terminated in order to prevent damage to the instllation environment"
		exit 5
	fi	
}

function cleanup_mounts() {
	if grep "${TARGET}/chroot" /proc/mounts; then
		# let's try to unmount them
		for MOUNT_POINT in $(grep "${TARGET}/chroot" /proc/mounts | awk '{print $2}'); do
			umount ${MOUNT_POINT} 2> /dev/null
		done
	fi
	if [ -z $1 ]; then
		SHELL_REPEAT=3
	else
		SHELL_REPEAT=$(($1))
	fi
	while grep "${TARGET}/chroot" /proc/mounts > /dev/null; do
		echo >&2
		show_error "WARNING: There are some active mounts in the installation environment that"
		show_error "         cannot be unmounted automatically because probably they are still"
		show_error "         in use by some running process."
		show_error "         Following you get some useful information for solving the problem"
		show_error "         manually."
		echo >&2
		echo "Active filesystem mounts" >&2
		echo "--------------------------------" >&2
		grep "${TARGET}/chroot" /proc/mounts | awk '{print $2}' >&2
		echo >&2
		echo "Active processes having open handles on the mountpoints" >&2
		echo "-------------------------------------------------------" >&2
		for MOUNT_POINT in $(grep "${TARGET}/chroot" /proc/mounts | awk '{print $2}'); do
			lsof | grep ${MOUNT_POINT} >&2
		done
		
		if [ ${SHELL_REPEAT} -lt 1 ]; then
			echo >&2
			echo "Please try to unmount them manually before continuing or reboot." >&2
			exit 1
		fi
		
		echo "A chroot shell into the target environment will be launched for you" >&2
		(( SHELL_REPEAT-- ))
		if [ ${SHELL_REPEAT} -lt 1 ]; then
			echo "so that you may solve the problem." >&2
		else
			echo "so that you may solve the problem. Upon exiting the shell, the dismount" >&2
			echo "will be attempted again." >&2
		fi
		echo "ENTERING CHROOT SHELL...." >&2
		mount_special		
		export debian_chroot="${TARGET} Environment"
		chroot "${TARGET}/chroot" /bin/bash

		if grep "${TARGET}/chroot" /proc/mounts; then
			# trying again to dismount
			umount_special 2> /dev/null
			for MOUNT_POINT in $(grep "${TARGET}/chroot" /proc/mounts | awk '{print $2}'); do
				umount ${MOUNT_POINT} 2> /dev/null
			done
		fi
	done
}


function find_environment() {
	if [ $# -lt 1 ]; then
		# no environment name specified. It must be here....
		test_environment "$(pwd)"
		TARGET="$(pwd)"
	elif [ "${1:0:1}" = "/" ]; then
		# absolute path specified
		test_environment "$1"
		TARGET="$1"
	elif [ -d "$(pwd)/$1" ]; then
		# specified environment under the current directory?
		test_environment "$(pwd)/$1"
		TARGET="$(pwd)/$1"
	elif [ -d "${UIC_WORKDIR}/$1" ]; then
		# specified environment under the default working directory?
		test_environment "${UIC_WORKDIR}/$1"
		TARGET="${UIC_WORKDIR}/$1"
	else
		show_error "Environment $1 does not exist"
		exit 2
	fi
	TARGETNAME=$(basename ${TARGET})
	TARGETPATH=$(dirname ${TARGET})
}

function test_environment() {
	if [ ! -d "$1" ]; then
		show_error "Environment $1 does not exist"
		exit 1
	fi

	if [ ! -f "$1/uic.conf" ]; then
		show_error "Environment $1 does not contain a configuration file"
		exit 1
	fi

	if [ ! -d "$1/files" ]; then
		show_error "Environment $1 is invalid"
		exit 1
	fi

#	if [ $(expr match "$1" '.*\/.*') -ne 0 ]; then
#		show_error "Target $1 cannot be a path"
#		exit 1
#	fi
}

function test_environment_empty() {
	if [ $(find "${TARGET}/chroot" | wc -l) -lt 2 ]; then
		show_error "Environment is empty. Use 'uic create' to create a new one."
		exit 1
	fi
}

function test_builder_comaptibility() {
	MY_ARCH=$(dpkg-query -W -f='${Architecture}\n' dpkg)
	if [ "${MY_ARCH}" = "${UIC_ARCH}" ]; then
		show_verbose 2 "Target has the same architecture (${MY_ARCH})"
		return 0
	fi
	case "${MY_ARCH}" in
	"amd64")	if [ "${UIC_ARCH}" = "i386" ]; then
				show_verbose 2 "Target has a compatible architecture"
				return 0
			fi
			;;
	esac
	show_error "Target architecture ${UIC_ARCH} not compatible with ${MY_ARCH}"
	exit 3;
}

function cleanup_apt_cache() {
	show_verbose 2 "Cleaning up APT cache"
	if [ -z "$1" ]; then
		apt-get clean
	else
		chroot "$1" apt-get clean
	fi
}

function cleanup_apt_all() {
	show_verbose 2 "Cleaning up all APT files"
	rm -f $1/var/lib/apt/cdroms.list~
	rm -rf $1/var/lib/apt/lists/
	mkdir -p $1/var/lib/apt/lists/partial
	touch $1/var/lib/apt/lists/partial/.delete-me-later
	rm -rf $1/var/cache/apt
	mkdir -p $1/var/cache/apt/archives/partial
}

function cleanup_log_all() {
	show_verbose 2 "Cleaning up log files"
	logfiles="$(find $1/var/log -name '*.[0-9]*')"
	logfiles="$logfiles $(find $1/var/log -name '*.gz')"
	for logfile in $logfiles; do
		show_verbose 3 "Deleting $logfile"
	        rm -f "$logfile"
	done
	for logfile in $(find "$1/var/log" -type f); do
		show_verbose 3 "Truncating $logfile"
		>"$logfile"
	done
}

function cleanup_history() {
	show_verbose 2 "Removing history files of user root"
	rm -f $1/root/.*_history
}

function cleanup_fixed_devices() {
	show_verbose 2 "Cleaning up persistent device assignments"
	rm -f $1/etc/udev/rules.d/70-persistent-cd.rules
	rm -f $1/etc/udev/rules.d/70-persistent-net.rules
}

function cleanup_all() {
	cleanup_apt_cache $1
	cleanup_apt_all $1
	cleanup_log_all $1
	cleanup_history $1
	cleanup_fixed_devices $1
}

function cleanup_environment() {
	show_verbose 1 "Cleaning up installation environment..."
	cleanup_all "${TARGET}/chroot"
}

function verify_environment() {
	if [ -z "$1" ]; then
		TESTPATH=${TARGET}
	else
		TESTPATH=${1}
	fi
	if [ ! -f "${TESTPATH}/uic.md5" ]; then
		show_verbose 1 "No integrity checksums found."
		return 0;
	fi
	show_verbose 2 "Testing integrity checksums"
	MD5TEMP=$(mktemp)
	SEDFORMULA="s/ \*/ \*"$(echo -n "$TESTPATH" | sed -e 's/\//\\\//g')"\//g" 
	sed -e "$SEDFORMULA" < "${TESTPATH}/uic.md5" > "$MD5TEMP"
	md5sum --quiet -c "$MD5TEMP"
	if [ $? -ne 0 ]; then
		show_warning "Environment integrity error."
		rm "$MD5TEMP"
		return 1
	fi
	rm "$MD5TEMP"
	return 0
}

function test_prereq() {
	if [ -z $(which debootstrap) ]; then
		show_error "Package debootstrap not installed."
		exit 1
	fi
}

function call_hook() {
	if [ -z "$1" ]; then
		return 0
	fi
	show_verbose 3 "Searching hook $1..."
	if [ -x "${TARGET}/hooks/$1" ]; then
		show_verbose 2 "Executing hook $1..."
		source "${TARGET}/hooks/$1"
		test_exec $1
	fi
}

function call_chroot_hook() {
	if [ -z "$1" ]; then
		return 0
	fi
	show_verbose 3 "Searching chroot hook $1..."
	if [ -x "${TARGET}/hooks/$1" ]; then
		show_verbose 2 "Copying chroot hook $1 into the installation environment..."
		cp "${TARGET}/hooks/$1" "${TARGET}/chroot/tmp"
		show_verbose 2 "Executing hook $1..."
		chroot "$TARGET/chroot" "/tmp/$1"
		test_exec $1
		show_verbose 2 "Removing chroot hook $1 from the installation environment..."
		rm "${TARGET}/chroot/tmp/$1"
	fi
}

function apply_customizations() {
	if [ -z "$1" ]; then
		CUST_SUBDIR="files"
	else
		CUST_SUBDIR="$1"
	fi
	show_verbose 1 "Applying customizations to the target installation environment..."
	call_hook pre_customization
	call_chroot_hook chroot_pre_customization
	cp -a "$TARGET/$CUST_SUBDIR/." "$TARGET/chroot/"
	if [ -f "${TARGET}/$CUST_SUBDIR.remove" ]; then
		xargs -r -a "${TARGET}/$CUST_SUBDIR.remove" rm -rf
	fi
	call_chroot_hook chroot_post_customization
	call_hook post_customization
}

function get_filtered_repository() {
	if [ -z "${UIC_APTPROXY}" ]; then
		echo ${UIC_REPOSITORY}
	else
		echo ${UIC_REPOSITORY} | sed -e "s/http:\/\/[^\/]*/http:\/\/${UIC_APTPROXY}/g"
	fi
}

function init_apt_proxy() {
	if [ -z "${UIC_APTPROXY}" ]; then
		return 0
	fi
	if [ -f "$TARGET/chroot/etc/apt/sources.list" ]; then
		mv "$TARGET/chroot/etc/apt/sources.list" "$TARGET/chroot/etc/apt/sources.list.BACKUP"
		sed -e "s/http:\/\/[^\/]*/http:\/\/${UIC_APTPROXY}/g" < "$TARGET/chroot/etc/apt/sources.list.BACKUP" > "$TARGET/chroot/etc/apt/sources.list"
	fi
}

function exit_apt_proxy() {
	if [ -f "$TARGET/chroot/etc/apt/sources.list.BACKUP" ]; then
		mv "$TARGET/chroot/etc/apt/sources.list.BACKUP" "$TARGET/chroot/etc/apt/sources.list"
	fi
}
